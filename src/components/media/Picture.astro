---
import { getImage } from "astro:assets";
let {
  src,
  aspect,
  attributes,
  sizes = "100vw",
  alt = "my image",
  width = 640,
  height = 640,
  loading = "lazy",
  widths = [
    240, 320, 400, 450, 480, 580, 640, 750, 828, 940, 990,1080, 1200, 1450, 1920,
  ],
  artDirectives = [],
  layout = "fill",
} = Astro.props;

// Verificar si es una URL externa o una imagen local
const isExternalUrl = src.startsWith('http://') || src.startsWith('https://');

let imgObj;

if (isExternalUrl) {
  // Para URLs externas, usar directamente la URL
  imgObj = src;
} else {
  // Para im치genes locales, usar el sistema de importaci칩n
  const allImages = import.meta.glob("/src/assets/*.{jpeg,jpg,png,gif}");
  
  const imageLoader = allImages[src];
  if (!imageLoader || typeof imageLoader !== 'function') {
    throw new Error(`Imagen no encontrada: ${src}. Verifica que la ruta sea correcta y que la imagen exista en /src/assets/`);
  }

  const imgModule = await imageLoader();
  imgObj = (imgModule as any).default;
}

if (aspect) height = Math.round(width / aspect);
let image;
let sources: { format: string; srcset: string; }[] = [];
let artdirection: { format: string; srcset: string; media: string; }[][] = [];

if (isExternalUrl) {
  // Para URLs externas, no podemos optimizar, usar imagen directamente
  image = {
    src: imgObj,
    width: width,
    height: height
  };
} else {
  // Para im치genes locales, aplicar optimizaci칩n
  image = await getImage({
    src: imgObj,
    width: width,
    height: height,
    aspect: aspect,
    format: imgObj.format,
  });

  const formats = ["webp"];

  sources = await Promise.all(
    formats.map(async (format) => {
      const image = await getImage({
        src: imgObj,
        format,
        width,
        height,
        widths,
        sizes,
        aspect,
      });
      return {
        format,
        srcset: image.srcSet.attribute,
      };
    }),
  );

  artdirection = await Promise.all(
    artDirectives.map(async (directive) => {
      return await Promise.all(
        formats.map(async (format) => {
          const image = await getImage({
            src: imgObj,
            format,
            width,
            height,
            aspect: directive.aspect,
            widths: directive.breakpoints,
          });

          return {
            format,
            srcset: image.srcSet.attribute,
            media: directive.media,
          };
        }),
      );
    }),
  );
}

function imgClass() {
  if (layout === "fill") {
    return "w-full h-full object-cover";
  }
  if (layout === "fullWidth") {
    return "w-full h-auto object-cover";
  }
  if (layout === "contain") {
    return "w-full h-full object-contain";
  }
}
---

<picture {...attributes?.picture}>
  {
    !isExternalUrl && artdirection.map((directive) => (
      <>
        {directive.map((source) => (
          <source
            type={`image/${source.format}`}
            srcset={source.srcset}
            sizes={sizes}
            media={source.media}
          />
        ))}
      </>
    ))
  }
  {
    !isExternalUrl && sources.map((source) => (
      <source
        type={`image/${source.format}`}
        srcset={source.srcset}
        sizes={sizes}
      />
    ))
  }

  <img
    src={image.src}
    alt={alt}
    class={imgClass()}
    {sizes}
    {width}
    {height}
    {loading}
    {...attributes?.img}
  />
</picture>
